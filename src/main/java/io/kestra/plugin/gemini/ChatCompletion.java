package io.kestra.plugin.gemini;

import com.google.genai.Client;
import com.google.genai.types.GenerateContentResponse;
import io.kestra.core.models.annotations.Example;
import io.kestra.core.models.annotations.Plugin;
import io.kestra.core.models.property.Property;
import io.kestra.core.models.tasks.RunnableTask;
import io.kestra.core.runners.RunContext;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import lombok.*;
import lombok.experimental.SuperBuilder;

import java.util.List;
import java.util.Optional;

import static io.kestra.core.utils.Rethrow.throwFunction;

@SuperBuilder
@ToString
@EqualsAndHashCode
@Getter
@NoArgsConstructor
@Schema(
    title = "Complete a chat using the Gemini Client.",
    description = "See [Gemini API about text completion](https://ai.google.dev/gemini-api/docs/text-generation) for more information."
)
@Plugin(
    examples = {
        @Example(
            title = "Chat completion using the Gemini Client.",
            full = true,
            code = """
                id: gemini_chat_completion
                namespace: company.team

                tasks:
                  - id: chat_completion
                    type: io.kestra.plugin.gemini.ChatCompletion
                    apiKey: "{{ secret('GEMINI_API_KEY') }}"
                    model: "gemini-2.5-flash"
                    messages:
                      - type: SYSTEM
                        content: You are a helpful assistant, answer concisely, avoid overly casual language or unnecessary verbosity.
                      - type: USER
                        content: "What is the capital of France?"
                """
        )
    },
     metrics = {
        @Metric(
            name = "candidate.token.count",
            type = Counter.TYPE,
            description = "The number of candidate tokens generated by the Gemini model."
        ),
        @Metric(
            name = "prompt.token.count",
            type = Counter.TYPE,
            description = "The number of tokens used in the input prompt."
        ),
        @Metric(
            name = "total.token.count",
            type = Counter.TYPE,
            description = "The total number of tokens processed by the Gemini model (prompt + generated)."
        )
    }
)
public class ChatCompletion extends AbstractGemini implements RunnableTask<ChatCompletion.Output> {

    @Schema(title = "List of chat messages in conversational order")
    @NotNull
    private Property<List<ChatMessage>> messages;

    @Override
    public Output run(RunContext runContext) throws Exception {

        var rApiKey = runContext.render(apiKey).as(String.class).orElseThrow();
        var rModel = runContext.render(model).as(String.class).orElseThrow();
        var rMessages = runContext.render(messages).asList(ChatMessage.class);

        try (var client = Client.builder().apiKey(rApiKey).build()) {
            var chat = client.chats.create(rModel);

            var responses = rMessages.stream()
                .map(throwFunction(m -> chat.sendMessage(m.content())))
                .toList();

            var candidates = responses.stream()
                .map(GenerateContentResponse::candidates)
                .filter(Optional::isPresent)
                .map(Optional::get)
                .flatMap(List::stream)
                .toList();

            var metadata = responses.stream()
                .map(GenerateContentResponse::usageMetadata)
                .filter(Optional::isPresent)
                .map(Optional::get)
                .toList();

            sendMetrics(runContext, metadata);

            return Output.builder()
                .predictions(candidates.stream().map(Prediction::of).toList())
                .build();
        }
    }

    @Builder
    @Getter
    public static class Output implements io.kestra.core.models.tasks.Output {
        @Schema(title = "List of text predictions made by the model.")
        private List<Prediction> predictions;
    }

    @Builder
    public record ChatMessage(ChatMessageType type, String content) {
    }

    public enum ChatMessageType {
        SYSTEM("system"),
        AI("assistant"),
        USER("user");

        private final String role;

        ChatMessageType(String role) {
            this.role = role;
        }

        public String role() {
            return role;
        }
    }
}
